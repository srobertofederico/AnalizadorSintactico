
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN DIVIDE ELSE END_OF_LINE EQUALS ERROR GREATEREQUAL GREATERTHAN IF LBRACE LESSEQUAL LESSTHAN LPAREN MINUS NAME NOTEQUALS NUMBER PLUS RBRACE RPAREN TIMES VAR\n    program : statement_list\n    \n    statement_list : statement\n                   | statement_list statement\n    \n    statement : assignment END_OF_LINE\n              | declaration END_OF_LINE\n              | if_statement\n    \n    declaration : VAR NAME\n                | VAR NAME ASSIGN expression\n    \n    assignment : NAME ASSIGN expression\n    \n    if_statement : IF LPAREN condition RPAREN block\n                 | IF LPAREN condition RPAREN block ELSE block\n    \n    condition : expression EQUALS expression\n              | expression NOTEQUALS expression\n              | expression LESSTHAN expression\n              | expression GREATERTHAN expression\n              | expression LESSEQUAL expression\n              | expression GREATEREQUAL expression\n    \n    block : LBRACE statement_list RBRACE\n    \n    expression : expression PLUS term\n               | expression MINUS term\n    \n    expression : term\n    \n    term : term TIMES factor\n         | term DIVIDE factor\n    \n    term : factor\n    \n    factor : NUMBER\n           | NAME\n           | LPAREN expression RPAREN\n    '
    
_lr_action_items = {'NAME':([0,2,3,6,8,10,11,12,13,15,21,22,25,26,27,28,32,33,34,35,36,37,43,44,52,53,54,],[7,7,-2,-6,14,-3,-4,-5,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-10,7,7,-11,-18,]),'VAR':([0,2,3,6,10,11,12,43,44,52,53,54,],[8,8,-2,-6,-3,-4,-5,-10,8,8,-11,-18,]),'IF':([0,2,3,6,10,11,12,43,44,52,53,54,],[9,9,-2,-6,-3,-4,-5,-10,9,9,-11,-18,]),'$end':([1,2,3,6,10,11,12,43,53,54,],[0,-1,-2,-6,-3,-4,-5,-10,-11,-18,]),'RBRACE':([3,6,10,11,12,43,52,53,54,],[-2,-6,-3,-4,-5,-10,54,-11,-18,]),'END_OF_LINE':([4,5,14,16,17,18,19,20,30,38,39,40,41,42,],[11,12,-7,-26,-9,-21,-24,-25,-8,-19,-20,-22,-23,-27,]),'ASSIGN':([7,14,],[13,22,]),'LPAREN':([9,13,15,21,22,25,26,27,28,32,33,34,35,36,37,],[15,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'NUMBER':([13,15,21,22,25,26,27,28,32,33,34,35,36,37,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'TIMES':([16,18,19,20,38,39,40,41,42,],[-26,27,-24,-25,27,27,-22,-23,-27,]),'DIVIDE':([16,18,19,20,38,39,40,41,42,],[-26,28,-24,-25,28,28,-22,-23,-27,]),'PLUS':([16,17,18,19,20,24,29,30,38,39,40,41,42,45,46,47,48,49,50,],[-26,25,-21,-24,-25,25,25,25,-19,-20,-22,-23,-27,25,25,25,25,25,25,]),'MINUS':([16,17,18,19,20,24,29,30,38,39,40,41,42,45,46,47,48,49,50,],[-26,26,-21,-24,-25,26,26,26,-19,-20,-22,-23,-27,26,26,26,26,26,26,]),'EQUALS':([16,18,19,20,24,38,39,40,41,42,],[-26,-21,-24,-25,32,-19,-20,-22,-23,-27,]),'NOTEQUALS':([16,18,19,20,24,38,39,40,41,42,],[-26,-21,-24,-25,33,-19,-20,-22,-23,-27,]),'LESSTHAN':([16,18,19,20,24,38,39,40,41,42,],[-26,-21,-24,-25,34,-19,-20,-22,-23,-27,]),'GREATERTHAN':([16,18,19,20,24,38,39,40,41,42,],[-26,-21,-24,-25,35,-19,-20,-22,-23,-27,]),'LESSEQUAL':([16,18,19,20,24,38,39,40,41,42,],[-26,-21,-24,-25,36,-19,-20,-22,-23,-27,]),'GREATEREQUAL':([16,18,19,20,24,38,39,40,41,42,],[-26,-21,-24,-25,37,-19,-20,-22,-23,-27,]),'RPAREN':([16,18,19,20,23,29,38,39,40,41,42,45,46,47,48,49,50,],[-26,-21,-24,-25,31,42,-19,-20,-22,-23,-27,-12,-13,-14,-15,-16,-17,]),'LBRACE':([31,51,],[44,44,]),'ELSE':([43,54,],[51,-18,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,44,],[2,52,]),'statement':([0,2,44,52,],[3,10,3,10,]),'assignment':([0,2,44,52,],[4,4,4,4,]),'declaration':([0,2,44,52,],[5,5,5,5,]),'if_statement':([0,2,44,52,],[6,6,6,6,]),'expression':([13,15,21,22,32,33,34,35,36,37,],[17,24,29,30,45,46,47,48,49,50,]),'term':([13,15,21,22,25,26,32,33,34,35,36,37,],[18,18,18,18,38,39,18,18,18,18,18,18,]),'factor':([13,15,21,22,25,26,27,28,32,33,34,35,36,37,],[19,19,19,19,19,19,40,41,19,19,19,19,19,19,]),'condition':([15,],[23,]),'block':([31,51,],[43,53,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',7),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',13),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',14),
  ('statement -> assignment END_OF_LINE','statement',2,'p_statement','parser.py',23),
  ('statement -> declaration END_OF_LINE','statement',2,'p_statement','parser.py',24),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',25),
  ('declaration -> VAR NAME','declaration',2,'p_declaration','parser.py',31),
  ('declaration -> VAR NAME ASSIGN expression','declaration',4,'p_declaration','parser.py',32),
  ('assignment -> NAME ASSIGN expression','assignment',3,'p_assignment','parser.py',41),
  ('if_statement -> IF LPAREN condition RPAREN block','if_statement',5,'p_if_statement','parser.py',47),
  ('if_statement -> IF LPAREN condition RPAREN block ELSE block','if_statement',7,'p_if_statement','parser.py',48),
  ('condition -> expression EQUALS expression','condition',3,'p_condition','parser.py',57),
  ('condition -> expression NOTEQUALS expression','condition',3,'p_condition','parser.py',58),
  ('condition -> expression LESSTHAN expression','condition',3,'p_condition','parser.py',59),
  ('condition -> expression GREATERTHAN expression','condition',3,'p_condition','parser.py',60),
  ('condition -> expression LESSEQUAL expression','condition',3,'p_condition','parser.py',61),
  ('condition -> expression GREATEREQUAL expression','condition',3,'p_condition','parser.py',62),
  ('block -> LBRACE statement_list RBRACE','block',3,'p_block','parser.py',68),
  ('expression -> expression PLUS term','expression',3,'p_expression','parser.py',74),
  ('expression -> expression MINUS term','expression',3,'p_expression','parser.py',75),
  ('expression -> term','expression',1,'p_expression_term','parser.py',81),
  ('term -> term TIMES factor','term',3,'p_term','parser.py',87),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',88),
  ('term -> factor','term',1,'p_term_factor','parser.py',94),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',100),
  ('factor -> NAME','factor',1,'p_factor','parser.py',101),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',102),
]
